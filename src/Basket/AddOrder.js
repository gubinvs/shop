import ApiUrl from '../js/ApiUrl.js';
import { v4 as uuidv4 } from 'uuid';

const addOrder = async (props) => {
  const token = localStorage.getItem("token");
  if (!token) return;

  try {
    // –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞
    const numberOrderResponse = await fetch(`${ApiUrl}/api/NumberOrder`);
    if (!numberOrderResponse.ok) throw new Error(`–û—à–∏–±–∫–∞ HTTP: ${numberOrderResponse.status}`);
    const numberOrder = await numberOrderResponse.text();

    // –ü–æ–ª—É—á–∞–µ–º GUID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userResponse = await fetch(`${ApiUrl}/api/DefineUserGuidId`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ token }),
    });
    if (!userResponse.ok) throw new Error(`–û—à–∏–±–∫–∞ HTTP: ${userResponse.status}`);
    const userData = await userResponse.json();
    const guidId = userData.message;
    if (!guidId) throw new Error("GUID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω");

    const orderGuidId = uuidv4(); // —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∑–∞–∫–∞–∑–∞

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
    const items = props.map((item) => ({
      GuidIdUser: guidId,
      GuidIdOrder: orderGuidId,
      GuidIdItem: item.guidId || item.guid || item.GuidId || null,
      VendorCode: item.vendorCode || item.VendorCode,
      NameItem: item.name || item.nameComponent || "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è",
      PriceItem: parseInt(item.price, 10) || 0,
      ImageItem: item.image || item.basketImgPath || "",
      QuantityItem: parseInt(item.quantity, 10) || 1,
      NumberOrder: parseInt(numberOrder),
    }));

    console.log("üì¶ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑:", items);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
    const response = await fetch(`${ApiUrl}/api/SaveOrder`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(items),
    });

    if (!response.ok) throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: ${response.status}`);

    alert("‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!");
    localStorage.removeItem("cart");
    window.location.href = "/DefineUser";

  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞:", error);
    alert("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.");
  }
};

export default addOrder;
